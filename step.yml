title: |-
  Device Farmer/Open STF Connect
summary: |
  Connects with devices from Device Farmer/Open Smartphone Test Farm
description: |
  To use this step, you need an access to running [Device Farmer](https://devicefarmer.github.io/) or [Open STF](https://openstf.io/) instance with at least 1 device connected.
  [Access token](https://github.com/devicefarmer/stf/blob/master/doc/API.md#authentication) and ADB keys has to be set up using STF web UI.
  Typical workflow:

  1. App compilation e.g. using Gradle Runner step.

  2. Device Farmer/Open STF Connect (this step).

  3. Android instrumention and/or UI tests e.g. using Gradle Unit Test step.

  4. Device Farmer/Open STF Disconnect step with `is_always_run: true` (to stop using remote devices).

website: https://github.com/DroidsOnRoids/bitrise-step-openstf-connect
source_code_url: https://github.com/DroidsOnRoids/bitrise-step-openstf-connect
support_url: https://github.com/DroidsOnRoids/bitrise-step-openstf-connect/issues

project_type_tags:
  - android
  - xamarin
  - react-native
  - cordova
  - ionic
  - flutter

type_tags:
  - test

is_requires_admin_user: false
is_always_run: false
is_skippable: false
run_if: ""

deps:
  brew:
  - name: jq
  apt_get:
  - name: jq

toolkit:
  go:
    package_name: github.com/DroidsOnRoids/bitrise-step-openstf-connect

inputs:
  - stf_host_url:
    opts:
      title: STF Host URL
      description: |
        URL of your STF instance e.g. `https://stf.example.com`
      is_required: true
      is_expand: true

  - stf_access_token:
    opts:
      title: STF API access token
      description: |
        STF API access token. Go to `Settings->Keys` on your STF web UI to generate one.
        Read more about tokens in [STF API documentation](https://github.com/devicefarmer/stf/blob/master/doc/API.md#authentication).
      is_required: true
      is_expand: true
      is_sensitive: true

  - device_filter: "."
    opts:
      title: Device requirements e.g. API level
      summary: Optional device requirements e.g. API level or manufacturer declared as jq select expression. For example to use only devices with API level 21 or newer `.sdk >= "21"`. Only present and not used devices are taken into account.
      description: |-
        If not empty will be passed to `jq` as a select expression. Syntax details can be found in [jq manual](https://stedolan.github.io/jq/manual/#select(boolean_expression)).
        Non-matching devices will be filtered out. Note that `.present and .owner == null` filter is applied implicitly so you don't need to add it manually.
      is_required: false
      is_expand: true

  - device_number_limit:
    opts:
      title: Device number limit
      description: |
        Maximum number of devices to be used. 0 and empty mean unlimited.
        If there are more available devices (after applying filter if any), only amount up to this number will be used. Devices will be chosen randomly.
      is_required: false
      is_expand: true

  - adb_key:
    opts:
      title: Private ADB key
      description: |
        Private ADB key to be used when debugging on STF devices. If not empty value will be saved to `~/.android/adbkey`.
        Key used during build has to be registered in STF under `Settings->Keys->ADB Keys`.
        You have to either provide value here or modify `~/.android/adbkey` before this step.
        Otherwise devices will be listed as unauthorized and cannot be used during build.
      is_required: false
      is_expand: true
      is_sensitive: true

  - adb_key_pub:
    opts:
      title: Public ADB key
      description: |
        Public ADB key to be used when debugging on STF devices. If not empty value will be saved to `~/.android/adbkey.pub`.
        Key used during build has to be registered in STF under `Settings->Keys->ADB Keys`.
        You have to either provide value here or modify `~/.android/adbkey.pub` before this step.
        Otherwise devices will be listed as unauthorized and cannot be used during build.
      is_required: false
      is_expand: true

outputs:
  - STF_DEVICE_SERIAL_LIST:
    opts:
      title: Connected devices serials
      description: |
        List of serials in JSON string array format to be used to disconnect devices after tests in next steps.
        List will contain serials of all present and not used devices (matching filter if any), even those for which connection has failed.